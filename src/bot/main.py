import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import uuid
import logging
import os
import sys

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from src.database.models import db
from src.utils.config import *
from src.services.keep_alive import start_keep_alive, stop_keep_alive, get_keep_alive_stats
from src.utils.bot_instance import set_bot_instance

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Identificador √∫nico para esta instancia del bot
BOT_INSTANCE_ID = str(uuid.uuid4())[:8]
logger.info(f"ü§ñ Bot iniciado - Instancia ID: {BOT_INSTANCE_ID}")

# Tiempo de inicio del servidor para calcular uptime
import time
server_start_time = time.time()

def has_staff_permissions(user: discord.Member) -> bool:
    """
    Verifica si un usuario tiene permisos de staff (administrador o roles espec√≠ficos)
    """
    # Verificar si es administrador
    if user.guild_permissions.administrator:
        return True
    
    # Verificar roles espec√≠ficos de staff
    staff_role_names = ["Staff", "Moderator", "Editor", "Moderador"]  # Incluir variantes en espa√±ol
    user_role_names = [role.name for role in user.roles]
    
    for staff_role in staff_role_names:
        if staff_role in user_role_names:
            return True
    
    return False

def has_manage_messages_or_staff(user: discord.Member) -> bool:
    """
    Verifica si un usuario tiene permisos para gestionar mensajes o es staff
    """
    return user.guild_permissions.manage_messages or has_staff_permissions(user)

async def remove_genius_roles(member: discord.Member, guild: discord.Guild):
    """Elimina todos los roles de Genius de un usuario"""
    try:
        # Obtener configuraci√≥n din√°mica
        from src.utils.dynamic_config import config
        
        # Lista de todos los roles de Genius que el bot puede asignar
        genius_role_ids = []
        genius_roles = ['ROLE_CONTRIBUTOR', 'ROLE_EDITOR', 'ROLE_MODERATOR', 'ROLE_STAFF', 'ROLE_VERIFIED_ARTIST', 'ROLE_TRANSCRIBER', 'ROLE_MEDIATOR']
        for role_key in genius_roles:
            role_id = config.get(role_key, '')
            if role_id and role_id.isdigit():
                genius_role_ids.append(int(role_id))
        
        verified_role_id = config.get('VERIFIED_ROLE_ID', '')
        if verified_role_id and verified_role_id.isdigit():
            genius_role_ids.append(int(verified_role_id))

        # Debug: mostrar configuraci√≥n de roles
        print(f"üîç DEBUG UNVERIFY - Genius role IDs configurados: {genius_role_ids}")
        print(f"üîç DEBUG UNVERIFY - Roles del usuario: {[f'{role.name} (ID: {role.id})' for role in member.roles]}")
        
        # Encontrar roles que el usuario tiene y que son de Genius
        roles_to_remove = []
        for role in member.roles:
            if role.id in genius_role_ids:
                roles_to_remove.append(role)
                print(f"‚úÖ DEBUG UNVERIFY - Rol a eliminar: {role.name} (ID: {role.id})")
            else:
                print(f"‚è≠Ô∏è DEBUG UNVERIFY - Rol no es de Genius: {role.name} (ID: {role.id})")

        print(f"üîç DEBUG UNVERIFY - Total roles a eliminar: {len(roles_to_remove)}")
        
        if roles_to_remove:
            await member.remove_roles(*roles_to_remove, reason="Usuario desverificado")
            logger.info(f"‚úÖ Roles de Genius eliminados de {member}: {[role.name for role in roles_to_remove]}")
        else:
            logger.info(f"‚ÑπÔ∏è {member} no ten√≠a roles de Genius para eliminar")

        # Intentar restaurar nickname (opcional)
        try:
            await member.edit(nick=None, reason="Usuario desverificado")
            logger.info(f"‚úÖ Nickname restaurado para {member}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è No se pudo restaurar nickname de {member}: {e}")

    except Exception as e:
        logger.error(f"‚ùå Error eliminando roles de Genius de {member}: {e}")

async def setup_config_event_listeners():
    """Configurar listeners para eventos de configuraci√≥n"""
    try:
        # Sistema de eventos local
        from src.utils.event_system import event_system, Events
        
        # Establecer el loop de eventos para callbacks async
        event_system.set_event_loop(asyncio.get_event_loop())
        
        # Suscribirse a eventos de configuraci√≥n
        event_system.subscribe_async(Events.CONFIG_UPDATED, on_config_updated)
        event_system.subscribe_async(Events.ROLE_CONFIG_CHANGED, on_role_config_changed)
        event_system.subscribe_async(Events.DISCORD_TOKEN_CHANGED, on_discord_token_changed)
        
        # Sistema de se√±ales para comunicaci√≥n entre procesos
        from src.utils.signal_system import signal_system, Signals
        
        # Suscribirse a se√±ales de configuraci√≥n
        signal_system.subscribe(Signals.CONFIG_UPDATED, on_config_signal)
        signal_system.subscribe(Signals.ROLE_CONFIG_CHANGED, on_role_config_signal)
        signal_system.subscribe(Signals.DISCORD_TOKEN_CHANGED, on_discord_token_signal)
        
        # Iniciar polling de se√±ales
        signal_system.start_polling(interval=2.0)
        
        logger.info("‚úÖ Sistema de eventos y se√±ales de configuraci√≥n configurado")
        
    except Exception as e:
        logger.error(f"‚ùå Error configurando listeners de eventos: {e}")

async def on_config_updated(data):
    """Callback cuando se actualiza la configuraci√≥n"""
    try:
        logger.info(f"üîÑ Configuraci√≥n actualizada: {data}")
        
        # La configuraci√≥n din√°mica se actualiza autom√°ticamente
        # No necesitamos recargar nada manualmente
        
        logger.info("‚úÖ Configuraci√≥n din√°mica actualizada autom√°ticamente")
        
    except Exception as e:
        logger.error(f"‚ùå Error procesando actualizaci√≥n de configuraci√≥n: {e}")

async def on_role_config_changed(data):
    """Callback cuando cambian configuraciones de roles"""
    try:
        logger.info(f"üé≠ Configuraci√≥n de roles actualizada: {data}")
        
        # Obtener configuraci√≥n din√°mica actualizada
        from src.utils.dynamic_config import config
        verified_role_id = config.get('VERIFIED_ROLE_ID', '')
        
        # Log de los nuevos valores
        logger.info(f"üîÑ Roles actualizados - VERIFIED_ROLE_ID: {verified_role_id}")
        logger.info(f"üîÑ Configuraci√≥n de roles actualizada din√°micamente")
        
    except Exception as e:
        logger.error(f"‚ùå Error procesando cambio de roles: {e}")

async def on_discord_token_changed(data):
    """Callback cuando cambia el token de Discord"""
    try:
        logger.warning("‚ö†Ô∏è Token de Discord cambiado - Se requiere reinicio del bot")
        
        # Nota: Cambiar el token requiere reiniciar la conexi√≥n del bot
        # En un entorno de producci√≥n, esto podr√≠a requerir un reinicio completo
        
    except Exception as e:
        logger.error(f"‚ùå Error procesando cambio de token: {e}")

def on_config_signal(data):
    """Callback s√≠ncrono para se√±ales de configuraci√≥n"""
    try:
        logger.info(f"üì° Se√±al de configuraci√≥n recibida: {data}")
        
        # La configuraci√≥n din√°mica se actualiza autom√°ticamente
        # No necesitamos recargar nada manualmente
        
        logger.info("‚úÖ Configuraci√≥n din√°mica actualizada desde se√±al")
        
    except Exception as e:
        logger.error(f"‚ùå Error procesando se√±al de configuraci√≥n: {e}")

def on_role_config_signal(data):
    """Callback s√≠ncrono para se√±ales de cambio de roles"""
    try:
        logger.info(f"üé≠ Se√±al de roles recibida: {data}")
        
        # La configuraci√≥n din√°mica se actualiza autom√°ticamente
        # No necesitamos recargar nada manualmente
        
        logger.info("‚úÖ Configuraci√≥n de roles actualizada din√°micamente desde se√±al")
        
    except Exception as e:
        logger.error(f"‚ùå Error procesando se√±al de roles: {e}")

def on_discord_token_signal(data):
    """Callback s√≠ncrono para se√±ales de cambio de token"""
    try:
        logger.warning("‚ö†Ô∏è Se√±al de cambio de token recibida - Se requiere reinicio")
        
        # En un entorno de producci√≥n, esto podr√≠a disparar un reinicio autom√°tico
        
    except Exception as e:
        logger.error(f"‚ùå Error procesando se√±al de token: {e}")

intents = discord.Intents.default()
# Aseg√∫rate de habilitar estos intents tambi√©n en el Developer Portal
intents.guilds = True
intents.messages = True  # necesario para recibir MessageCreate
intents.message_content = True  # necesario para leer el contenido y usar prefijos
intents.guild_reactions = True
intents.members = True  # Necesario para obtener miembros del servidor

# Prefijo din√°mico desde configuraci√≥n
def get_prefix(_bot, message):
    # Devuelve el prefijo actual sin reiniciar el bot
    from src.utils.dynamic_config import config
    return config.get('CMD_PREFIX', '!!') or "!!"

bot = commands.Bot(command_prefix=get_prefix, intents=intents, help_command=None)

# Establecer la instancia del bot para acceso desde otros m√≥dulos
set_bot_instance(bot)

@bot.event
async def on_member_remove(member: discord.Member):
    """Se ejecuta cuando un miembro se sale del servidor"""
    try:
        # Verificar si el usuario estaba verificado
        if await db.is_verified(member.id):
            logger.info(f"üëã Usuario verificado {member} se sali√≥ del servidor {member.guild.name}")

            # Eliminar verificaci√≥n de la base de datos
            await db.remove_verification(member.id)
            logger.info(f"üóëÔ∏è Verificaci√≥n eliminada para {member}")

            # Nota: No necesitamos eliminar roles porque el usuario ya no est√° en el servidor
            # Los roles se eliminan autom√°ticamente cuando alguien se sale

        else:
            logger.debug(f"Usuario no verificado {member} se sali√≥ del servidor")

    except Exception as e:
        logger.error(f"Error procesando salida de miembro {member}: {e}")

@bot.event
async def on_message(message: discord.Message):
    """Se ejecuta cuando se recibe un mensaje"""
    try:
        # Ignorar mensajes del bot
        if message.author == bot.user:
            return
        
        # Verificar si es un mensaje de bienvenida del sistema de Discord
        # Tipos de mensajes de bienvenida que Discord puede enviar:
        welcome_message_types = [
            discord.MessageType.new_member,           # Usuario se uni√≥ al servidor
            discord.MessageType.premium_guild_subscription,  # Boost del servidor
            discord.MessageType.premium_guild_tier_1,        # Servidor alcanz√≥ nivel 1
            discord.MessageType.premium_guild_tier_2,        # Servidor alcanz√≥ nivel 2  
            discord.MessageType.premium_guild_tier_3         # Servidor alcanz√≥ nivel 3
        ]
        
        if (message.type in welcome_message_types and 
            message.author.bot is False):
            
            # Reaccionar con emoji de saludo
            await message.add_reaction("üëãüèª")
            
            # Log espec√≠fico seg√∫n el tipo de mensaje
            if message.type == discord.MessageType.new_member:
                logger.info(f"üëã Reaccion√© al mensaje de bienvenida de {message.author} en {message.guild.name}")
            elif message.type in [discord.MessageType.premium_guild_subscription, 
                                discord.MessageType.premium_guild_tier_1,
                                discord.MessageType.premium_guild_tier_2, 
                                discord.MessageType.premium_guild_tier_3]:
                logger.info(f"üéâ Reaccion√© al mensaje de boost/nivel de {message.author} en {message.guild.name}")
        
        # Procesar comandos normalmente
        await bot.process_commands(message)
        
    except discord.Forbidden:
        logger.warning(f"No tengo permisos para reaccionar al mensaje en {message.guild.name if message.guild else 'DM'}")
    except discord.HTTPException as e:
        logger.warning(f"Error HTTP al reaccionar al mensaje: {e}")
    except Exception as e:
        logger.error(f"Error procesando mensaje: {e}")

# Comando simple para ver si responde (solo para staff)
@bot.command(name='ping')
async def ping(ctx: commands.Context):
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_PING', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    
    logger.info(f"üèì [COMANDO] Ping ejecutado por {ctx.author} - ID: {ctx.message.id} - Instancia: {BOT_INSTANCE_ID}")
    await ctx.send(f'Pong! üèì (Instancia: `{BOT_INSTANCE_ID}`)')

# Comando de prueba para verificar reacciones de bienvenida (solo administradores y staff)
@bot.command(name='test_welcome')
async def test_welcome_reaction(ctx: commands.Context):
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_TEST_WELCOME', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    """Comando de prueba para verificar que las reacciones de bienvenida funcionan"""
    try:
        # Reaccionar al mensaje del comando con el emoji de bienvenida
        await ctx.message.add_reaction("üëãüèª")
        
        embed = discord.Embed(
            title="üß™ Prueba de Reacciones de Bienvenida",
            description="‚úÖ **Funcionalidad activa**\n\nEl bot ahora reaccionar√° autom√°ticamente con üëãüèª a:\n‚Ä¢ Mensajes de nuevos miembros\n‚Ä¢ Mensajes de boost del servidor\n‚Ä¢ Mensajes de nivel del servidor",
            color=0x00ff00
        )
        
        embed.add_field(
            name="üìã Tipos de Mensaje Soportados",
            value="‚Ä¢ `new_member` - Usuario se uni√≥\n‚Ä¢ `premium_guild_subscription` - Boost\n‚Ä¢ `premium_guild_tier_1/2/3` - Niveles",
            inline=False
        )
        
        embed.add_field(
            name="‚öôÔ∏è Configuraci√≥n",
            value="‚Ä¢ Emoji: üëãüèª (`:wave_tone1:`)\n‚Ä¢ Solo usuarios reales (no bots)\n‚Ä¢ Logging habilitado",
            inline=False
        )
        
        embed.set_footer(text="Prueba completada - El bot reaccion√≥ a este mensaje")
        
        await ctx.send(embed=embed)
        logger.info(f"üß™ Prueba de reacciones de bienvenida ejecutada por {ctx.author}")
        
    except Exception as e:
        await ctx.send(f"‚ùå Error en la prueba: {e}")
        logger.error(f"Error en test_welcome_reaction: {e}")

class HelpView(discord.ui.View):
    def __init__(self, is_admin=False):
        super().__init__(timeout=300)  # 5 minutos de timeout
        self.is_admin = is_admin
        self.current_page = 0
        self.pages = self.create_pages()
        
    def create_pages(self):
        """Crea las p√°ginas del sistema de ayuda"""
        pages = []
        
        # P√°gina 1: Informaci√≥n General
        embed1 = discord.Embed(
            title="Genius en Espa√±ol - Ayuda (P√°gina 1/4)",
            description="Bot de verificaci√≥n con Genius para obtener roles autom√°ticamente",
            color=0x5865f2
        )
        
        embed1.add_field(
            name="¬øQu√© es GeeBot?",
            value=(
                "Este bot permite verificar tu cuenta de **Genius** "
                "y obtener roles autom√°ticamente en Discord basados en tu perfil de la plataforma.\n\n"
                "- **Conecta** tu cuenta de Genius\n"
                "- **Obt√©n roles** autom√°ticamente\n"
                "- **Verificaci√≥n** instant√°nea"
            ),
            inline=False
        )
        
        embed1.add_field(
            name="Inicio R√°pido",
            value=(
                "1Ô∏è. Un administrador ejecuta `!!setup_verification` o `/setup_verification`\n"
                "2Ô∏è. Haz clic en el bot√≥n **üîó Verificar con Genius**\n"
                "3Ô∏è. Autoriza la aplicaci√≥n en Genius.com\n"
                "4Ô∏è. ¬°Listo! Obtienes tus roles autom√°ticamente"
            ),
            inline=False
        )
        
        embed1.add_field(
            name="Tipos de Comandos",
            value=(
                "- **Comandos con prefijo:** `!!comando`\n"
                "- **Slash commands:** `/comando`\n"
                "- Ambos tipos funcionan igual, ¬°usa el que prefieras!"
            ),
            inline=False
        )
        
        embed1.set_footer(text="Usa los botones para navegar ‚Ä¢ P√°gina 1 de 4")
        pages.append(embed1)
        
        # P√°gina 2: Comandos de Usuario
        embed2 = discord.Embed(
            title="Genius en Espa√±ol - Comandos de Usuario (P√°gina 2/4)",
            description="Comandos disponibles para todos los usuarios",
            color=0x5865f2
        )
        
        user_commands = [
            {
                "name": "verify_status",
                "description": "Verifica tu estado de verificaci√≥n actual",
                "prefix_usage": "!!verify_status [@usuario]",
                "slash_usage": "/verify_status [usuario]"
            },
            {
                "name": "help",
                "description": "Muestra el men√∫ de ayuda interactivo",
                "prefix_usage": "!!help",
                "slash_usage": "/help"
            }
        ]
        
        for cmd in user_commands:
            embed2.add_field(
                name=f"**{cmd['name']}**",
                value=f"- {cmd['description']}\n"
                      f"- **Prefijo:** `{cmd['prefix_usage']}`\n"
                      f"- **Slash:** `{cmd['slash_usage']}`",
                inline=False
            )
        
        embed2.set_footer(text="Usa los botones para navegar ‚Ä¢ P√°gina 2 de 4")
        pages.append(embed2)
        
        # P√°gina 3: Comandos de Administrador (solo si es admin)
        if self.is_admin:
            embed3 = discord.Embed(
                title="Genius en Espa√±ol - Comandos de Admin (P√°gina 3/4)",
                description="Comandos disponibles solo para administradores",
                color=0xff6b6b
            )
            
            admin_commands = [
                {
                    "name": "setup_verification",
                    "description": "Configura el mensaje de verificaci√≥n",
                    "prefix_usage": "!!setup_verification",
                    "slash_usage": "/setup_verification"
                },
                {
                    "name": "unverify",
                    "description": "Desverifica a un usuario y elimina sus roles",
                    "prefix_usage": "!!unverify @usuario",
                    "slash_usage": "/unverify usuario"
                },
                {
                    "name": "verified_list",
                    "description": "Lista todos los usuarios verificados del servidor",
                    "prefix_usage": "!!verified_list",
                    "slash_usage": "/verified_list"
                },
                {
                    "name": "list_roles",
                    "description": "Muestra todos los roles del servidor con sus IDs",
                    "prefix_usage": "!!list_roles",
                    "slash_usage": "/list_roles"
                },
                {
                    "name": "show_config",
                    "description": "Muestra la configuraci√≥n actual del bot",
                    "prefix_usage": "!!show_config",
                    "slash_usage": "/show_config"
                },
                {
                    "name": "test_roles",
                    "description": "Prueba la asignaci√≥n de roles manualmente",
                    "prefix_usage": "!!test_roles [@usuario]",
                    "slash_usage": "/test_roles [usuario]"
                },
                {
                    "name": "cleanup_verifications",
                    "description": "Limpia verificaciones de usuarios que ya no est√°n",
                    "prefix_usage": "!!cleanup_verifications",
                    "slash_usage": "/cleanup_verifications"
                },
                {
                    "name": "bot_stats",
                    "description": "Muestra estad√≠sticas completas del bot y sistema",
                    "prefix_usage": "!!bot_stats",
                    "slash_usage": "/bot_stats"
                },
                {
                    "name": "message",
                    "description": "Env√≠a un mensaje personalizado con embeds y botones",
                    "prefix_usage": "!!message [#canal]",
                    "slash_usage": "/message [canal]"
                },
                {
                    "name": "clean",
                    "description": "Elimina los √∫ltimos mensajes del canal actual",
                    "prefix_usage": "!!clean [cantidad]",
                    "slash_usage": "/clean [cantidad]"
                },
                {
                    "name": "test_welcome",
                    "description": "Prueba las reacciones autom√°ticas de bienvenida",
                    "prefix_usage": "!!test_welcome",
                    "slash_usage": "N/A (solo prefijo)"
                },
                {
                    "name": "sync",
                    "description": "Sincroniza los comandos slash con Discord",
                    "prefix_usage": "!!sync",
                    "slash_usage": "N/A (solo prefijo)"
                }
            ]
            
            # Mostrar comandos de forma m√°s compacta
            for cmd in admin_commands:
                embed3.add_field(
                    name=f"**{cmd['name']}**",
                    value=f"- {cmd['description']}\n"
                          f"- `{cmd['prefix_usage']}`\n"
                          f"- `{cmd['slash_usage']}`",
                    inline=True
                )
            
            embed3.set_footer(text="Usa los botones para navegar ‚Ä¢ P√°gina 3 de 4")
            embed3.set_author(
                name="Modo Administrador Activado",
                icon_url="https://cdn.discordapp.com/emojis/852558866305024000.png"
            )
            pages.append(embed3)
        else:
            # P√°gina 3 para usuarios normales: Informaci√≥n sobre roles
            embed3 = discord.Embed(
                title="Genius en Espa√±ol - Roles Disponibles (P√°gina 3/4)",
                description="Roles que puedes obtener al verificarte con Genius",
                color=0x5865f2
            )
            
            roles_info = [
                ("üé§ **Verified Artist**", "Artistas verificados en Genius"),
                ("üëë **Staff**", "Personal oficial de Genius"),
                ("üõ°Ô∏è **Moderator**", "Moderadores de comunidad"),
                ("‚úèÔ∏è **Editor**", "Editores de contenido"),
                ("üìù **Transcriber**", "Transcriptores de letras"),
                ("‚öñÔ∏è **Mediator**", "Mediadores de disputas"),
                ("ü§ù **Contributor**", "Contribuidores generales")
            ]
            
            roles_text = ""
            for role_name, role_desc in roles_info:
                roles_text += f"{role_name}\n{role_desc}\n\n"
            
            embed3.add_field(
                name="üè∑Ô∏è Roles de Genius Soportados",
                value=roles_text,
                inline=False
            )
            
            embed3.set_footer(text="Usa los botones para navegar ‚Ä¢ P√°gina 3 de 4")
            pages.append(embed3)
        
        # P√°gina 4: Informaci√≥n Adicional
        embed4 = discord.Embed(
            title="Genius en Espa√±ol - Informaci√≥n Adicional (P√°gina 4/4)",
            description="Detalles t√©cnicos y enlaces √∫tiles",
            color=0x5865f2
        )
        
        embed4.add_field(
            name="Proceso de Verificaci√≥n Detallado",
            value=(
                "1Ô∏è. **Setup:** un Moderador ejecuta `!!setup_verification` o `/setup_verification`\n"
                "2Ô∏è. **Click:** Usuario hace clic en üîó Verificar con Genius\n"
                "3Ô∏è. **Redirect:** Redirecci√≥n a Genius.com\n"
                "4Ô∏è. **Auth:** Usuario autoriza la aplicaci√≥n\n"
                "5. **Magic:** Bot autom√°ticamente:\n"
                "   ‚Ä¢ Cambia nickname al nombre de Genius\n"
                "   ‚Ä¢ Asigna roles basados en estatus\n"
                "   ‚Ä¢ Confirma verificaci√≥n exitosa"
            ),
            inline=False
        )
        
        embed4.add_field(
            name="Ventajas de los Slash Commands",
            value=(
                "‚Ä¢ **Autocompletado:** Discord sugiere opciones autom√°ticamente\n"
                "‚Ä¢ **Validaci√≥n:** Par√°metros validados antes de enviar\n"
                "‚Ä¢ **Interfaz moderna:** Integraci√≥n nativa con Discord\n"
                "‚Ä¢ **Privacidad:** Algunos comandos pueden ser privados (ephemeral)"
            ),
            inline=False
        )
        
        embed4.add_field(
            name="Notas Importantes",
            value=(
                "‚Ä¢ Los roles se asignan autom√°ticamente seg√∫n tu cuenta en Genius\n"
                "‚Ä¢ Solo puedes verificarte una vez por cuenta\n"
                "‚Ä¢ Los moderadores pueden desverificar usuarios si es necesario\n"
                "‚Ä¢ El bot respeta la privacidad y solo accede a informaci√≥n p√∫blica"
            ),
            inline=False
        )
        
        embed4.set_footer(text="Usa los botones para navegar ‚Ä¢ P√°gina 4 de 4")
        pages.append(embed4)
        
        return pages
    
    def update_buttons(self):
        """Actualiza el estado de los botones seg√∫n la p√°gina actual"""
        # Bot√≥n anterior
        self.children[0].disabled = (self.current_page == 0)
        
        # Bot√≥n siguiente
        self.children[1].disabled = (self.current_page == len(self.pages) - 1)
        
        # Actualizar labels con n√∫meros de p√°gina
        self.children[0].label = f"‚óÄÔ∏è Anterior"
        self.children[1].label = f"Siguiente ‚ñ∂Ô∏è"
    
    @discord.ui.button(label='‚óÄÔ∏è Anterior', style=discord.ButtonStyle.secondary, disabled=True)
    async def previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.current_page > 0:
            self.current_page -= 1
            self.update_buttons()
            await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)
    
    @discord.ui.button(label='Siguiente ‚ñ∂Ô∏è', style=discord.ButtonStyle.secondary)
    async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.current_page < len(self.pages) - 1:
            self.current_page += 1
            self.update_buttons()
            await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)
    
    @discord.ui.button(label='üè† Inicio', style=discord.ButtonStyle.primary)
    async def go_home(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.current_page = 0
        self.update_buttons()
        await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)
    
    @discord.ui.button(label='‚ùå Cerrar', style=discord.ButtonStyle.danger)
    async def close_help(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="‚ùå Ayuda Cerrada",
            description="¬°Gracias por usar el bot! Usa `!!help` cuando necesites ayuda nuevamente.",
            color=0x95a5a6
        )
        await interaction.response.edit_message(embed=embed, view=None)
    
    async def on_timeout(self):
        """Se ejecuta cuando el view expira"""
        # Deshabilitar todos los botones
        for item in self.children:
            item.disabled = True

@bot.command(name='help')
async def help_command(ctx):
    """Muestra la ayuda interactiva del bot con paginaci√≥n (solo para staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_HELP', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    
    logger.info(f"‚ùì [COMANDO] Help ejecutado por {ctx.author}")
    
    # Verificar si el usuario es administrador o staff
    is_admin = has_staff_permissions(ctx.author)
    
    # Crear vista con paginaci√≥n
    view = HelpView(is_admin=is_admin)
    view.update_buttons()
    
    # Enviar el primer embed con la vista
    await ctx.send(embed=view.pages[0], view=view)

@bot.command(name='test')
async def test(ctx):
    """Comando de prueba simple (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_TEST', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    
    logger.info(f"üß™ [COMANDO] Test ejecutado por {ctx.author}")
    await ctx.send("‚úÖ **Test exitoso!** El bot est√° funcionando correctamente.")

class VerificationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='üîó Verificar con Genius', style=discord.ButtonStyle.primary, custom_id='verify_button')
    async def verify_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        logger.info(f"üîó [BOT√ìN] Verificaci√≥n iniciada por {interaction.user} - Instancia: {BOT_INSTANCE_ID}")
        
        # Verificar si el usuario ya est√° verificado
        if await db.is_verified(interaction.user.id):
            embed = discord.Embed(
                title="‚ö†Ô∏è Ya Verificado",
                description="Tu cuenta ya est√° verificada",
                color=0xffa500
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Generar estado √∫nico para la verificaci√≥n
        state = str(uuid.uuid4())
        logger.info(f"üîó [BOT√ìN] Estado generado: {state} para usuario {interaction.user.id}")
        
        # Guardar verificaci√≥n pendiente
        await db.create_pending_verification(state, interaction.user.id)
        
        # Crear URL de verificaci√≥n
        verification_url = f"{BASE_URL}/auth?state={state}"
        logger.info(f"üîó [BOT√ìN] URL generada: {verification_url}")
        
        embed = discord.Embed(
            title="üîó Verificaci√≥n",
            description="Haz clic en el enlace de abajo para verificar tu cuenta de Genius",
            color=0x5865f2
        )
        embed.add_field(
            name="Instrucciones:",
            value="1. Haz clic en el enlace\n2. Inicia sesi√≥n en Genius\n3. Autoriza la aplicaci√≥n\n4. ¬°Listo!",
            inline=False
        )
        embed.add_field(
            name="üîó Enlace de Verificaci√≥n",
            value=f"[Verificar con Genius]({verification_url})",
            inline=False
        )
        embed.set_footer(text="Este enlace expira en 10 minutos")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.event
async def on_ready():
    logger.info(f'{bot.user} ha iniciado sesi√≥n!')
    logger.info(f'Bot conectado a {len(bot.guilds)} servidores')
    logger.info(f'ü§ñ Esta instancia: {BOT_INSTANCE_ID}')

    # Evitar ejecutar m√∫ltiples veces si el bot se reconecta
    if not hasattr(bot, '_ready_once'):
        bot._ready_once = True

        # Verificar duplicaci√≥n despu√©s de 10 segundos
        asyncio.create_task(check_for_duplicate_instances())

        # Inicializar base de datos
        await db.init_db()

        # Agregar la vista persistente
        bot.add_view(VerificationView())
        
        # Configurar sistema de eventos para sincronizaci√≥n en tiempo real
        await setup_config_event_listeners()
        
        # Cargar comandos adicionales
        try:
            # Cargar todos los comandos din√°micamente
            from src.bot.commands import load_all_commands
            loaded_commands = load_all_commands(bot)
            logger.info(f"‚úÖ Comandos cargados: {', '.join(loaded_commands)}")
            
            # Sincronizar los comandos con Discord
            logger.info("üîÑ Sincronizando comandos con Discord...")
            try:
                # Intentar sincronizar varias veces si es necesario
                max_attempts = 3
                for attempt in range(1, max_attempts + 1):
                    try:
                        synced = await bot.tree.sync()
                        logger.info(f"‚úÖ Comandos sincronizados correctamente: {len(synced)} comandos")
                        
                        # Registrar los comandos sincronizados
                        if synced:
                            command_names = [cmd.name for cmd in synced]
                            logger.info(f"üìã Comandos slash disponibles: {', '.join(command_names)}")
                        break  # Salir del bucle si la sincronizaci√≥n fue exitosa
                    except Exception as attempt_error:
                        if attempt < max_attempts:
                            logger.warning(f"‚ö†Ô∏è Intento {attempt} fallido: {attempt_error}. Reintentando en 2 segundos...")
                            await asyncio.sleep(2)
                        else:
                            raise  # Re-lanzar la excepci√≥n en el √∫ltimo intento
                
            except Exception as sync_error:
                logger.error(f"‚ùå Error sincronizando comandos despu√©s de {max_attempts} intentos: {sync_error}")
                logger.info("‚ÑπÔ∏è Los comandos se pueden sincronizar manualmente con !!sync")
            
            logger.info("‚úÖ Todos los comandos adicionales cargados correctamente")
        except Exception as e:
            logger.error(f"‚ùå Error cargando comandos adicionales: {e}")

        # Solo iniciar servidor web si no estamos en modo unificado
        if not os.environ.get("UNIFIED_MODE", False):
            # Iniciar servidor web en background
            asyncio.create_task(start_web_server())
            logger.info("üåê Servidor web iniciado en modo independiente")
        else:
            logger.info("üåê Modo unificado: servidor web gestionado externamente")
        
        # Iniciar keep-alive service si est√° habilitado
        if KEEP_ALIVE_ENABLED:
            asyncio.create_task(start_keep_alive(interval=KEEP_ALIVE_INTERVAL))
            logger.info(f"üîÑ Keep-alive habilitado (intervalo: {KEEP_ALIVE_INTERVAL}s)")

        logger.info("Bot listo, servidor web y keep-alive iniciados!")
    else:
        logger.info("Bot reconectado (no reinicializando servicios)")

async def start_web_server():
    """Inicia el servidor web en background"""
    try:
        from src.web.server import start_server
        await start_server()
    except Exception as e:
        logger.error(f"Error iniciando servidor web: {e}")

@bot.command(name='setup_verification')
async def setup_verification(ctx):
    """Comando para configurar el canal de verificaci√≥n (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_SETUP_VERIFICATION', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    try:
        logger.info(f"üîß [COMANDO] setup_verification ejecutado por {ctx.author} en {ctx.guild.name} - Instancia: {BOT_INSTANCE_ID}")
        base_url = config.get('BASE_URL', '')
        logger.info(f"üîß [DEBUG] BASE_URL actual: {base_url}")

        embed = discord.Embed(
            title="üîê Verificaci√≥n con Genius",
            description="Verifica tu cuenta de Genius para acceder a las funciones del servidor.",
            color=0x5865f2
        )
        embed.add_field(
            name="¬øPor qu√© verificar?",
            value="‚Ä¢ Acceso a canales\n‚Ä¢ Roles basados en cuenta de Genius\n‚Ä¢ Nickname autom√°tico de Genius",
            inline=False
        )
        embed.set_footer(text="Haz clic en el bot√≥n de abajo para comenzar")

        view = VerificationView()
        logger.info(f"üì§ [COMANDO] Enviando embed de verificaci√≥n...")
        message = await ctx.send(embed=embed, view=view)
        logger.info(f"‚úÖ [COMANDO] Setup de verificaci√≥n completado exitosamente - Mensaje ID: {message.id}")

    except Exception as e:
        logger.error(f"‚ùå [COMANDO] Error en setup_verification: {e}")
        await ctx.send(f"‚ùå Error configurando verificaci√≥n: {str(e)}")

@bot.command(name='verify_status')
async def verify_status(ctx, user: discord.Member = None):
    """Verifica el estado de verificaci√≥n de un usuario"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_VERIFY_STATUS', 'true').lower() == 'true':
        return
    
    # Si el usuario especifica a otro usuario, verificar permisos
    if user and user != ctx.author:
        if not has_staff_permissions(ctx.author):
            embed = discord.Embed(
                title="‚ùå Sin Permisos",
                description="Solo puedes verificar tu propio estado de verificaci√≥n. Los administradores y staff pueden verificar el estado de otros usuarios.",
                color=0xf04747
            )
            await ctx.send(embed=embed)
            return
    
    target_user = user or ctx.author
    
    verification = await db.get_verification(target_user.id)
    
    if verification:
        embed = discord.Embed(
            title="‚úÖ Usuario Verificado",
            color=0x43b581
        )
        embed.add_field(name="Discord", value=f"{target_user.mention}", inline=True)
        embed.add_field(name="Genius Username", value=verification['genius_username'], inline=True)
        embed.add_field(name="Genius Display Name", value=verification['genius_display_name'], inline=True)
        embed.add_field(name="Roles en Genius", value=verification['genius_roles'] or "Contributor", inline=False)
        embed.add_field(name="Verificado el", value=verification['verified_at'], inline=True)
    else:
        embed = discord.Embed(
            title="‚ùå Usuario No Verificado",
            description=f"{target_user.mention} no ha verificado su cuenta de Genius.com",
            color=0xf04747
        )
    
    await ctx.send(embed=embed)

@bot.command(name='unverify')
async def unverify(ctx, user: discord.Member):
    """Desverifica a un usuario y elimina sus roles de Genius (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_UNVERIFY', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    if await db.is_verified(user.id):
        # Eliminar de la base de datos
        await db.remove_verification(user.id)

        # Eliminar roles de Genius del usuario
        await remove_genius_roles(user, ctx.guild)

        embed = discord.Embed(
            title="‚úÖ Usuario Desverificado",
            description=f"{user.mention} ha sido desverificado exitosamente",
            color=0x43b581
        )
        embed.add_field(
            name="Acciones realizadas:",
            value="‚Ä¢ Eliminado de la base de datos\n‚Ä¢ Roles de Genius removidos\n‚Ä¢ Nickname restaurado",
            inline=False
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"{user.mention} no estaba verificado",
            color=0xf04747
        )
        await ctx.send(embed=embed)

@bot.command(name='verified_list')
async def verified_list(ctx):
    """Lista todos los usuarios verificados (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_VERIFIED_LIST', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    logger.info(f"üìã [COMANDO] verified_list ejecutado por {ctx.author}")
    
    try:
        # Obtener estad√≠sticas de la base de datos
        stats = await db.get_stats()
        verified_count = stats.get("verified_users", 0)
        
        if verified_count == 0:
            embed = discord.Embed(
                title="üìã Lista de Usuarios Verificados",
                description="No hay usuarios verificados en este servidor",
                color=0xffa500
            )
            await ctx.send(embed=embed)
            return
        
        # Obtener todos los usuarios verificados
        # Necesitamos agregar un m√©todo a la base de datos para esto
        try:
            import aiosqlite
            async with aiosqlite.connect(db.db_path) as database:
                cursor = await database.execute("""
                    SELECT discord_id, genius_username, genius_display_name, 
                           genius_roles, verified_at 
                    FROM verifications 
                    ORDER BY verified_at DESC
                """)
                verified_users = await cursor.fetchall()
        except Exception as e:
            logger.error(f"Error obteniendo usuarios verificados: {e}")
            embed = discord.Embed(
                title="‚ùå Error",
                description="Error al obtener la lista de usuarios verificados",
                color=0xf04747
            )
            await ctx.send(embed=embed)
            return
        
        # Crear embed con la lista
        embed = discord.Embed(
            title="üìã Lista de Usuarios Verificados",
            description=f"Total de usuarios verificados: **{verified_count}**",
            color=0x43b581
        )
        
        # Procesar usuarios en grupos de 10 para evitar l√≠mites de embed
        users_per_page = 10
        current_page = 0
        total_pages = (len(verified_users) + users_per_page - 1) // users_per_page
        
        start_idx = current_page * users_per_page
        end_idx = min(start_idx + users_per_page, len(verified_users))
        
        users_text = ""
        for i, user_data in enumerate(verified_users[start_idx:end_idx], start_idx + 1):
            discord_id, genius_username, genius_display_name, genius_roles, verified_at = user_data
            
            # Intentar obtener el usuario de Discord
            discord_user = ctx.guild.get_member(discord_id)
            if discord_user:
                discord_name = f"{discord_user.mention}"
                status_emoji = "üü¢"
            else:
                discord_name = f"Usuario no encontrado (ID: {discord_id})"
                status_emoji = "üî¥"
            
            # Formatear roles
            roles_list = genius_roles.split(',') if genius_roles else ['Contributor']
            roles_text = ', '.join(roles_list)
            
            # Formatear fecha
            try:
                from datetime import datetime
                verified_date = datetime.fromisoformat(verified_at.replace('Z', '+00:00'))
                date_text = verified_date.strftime("%d/%m/%Y")
            except:
                date_text = "Fecha desconocida"
            
            users_text += f"{status_emoji} **{i}.** {discord_name}\n"
            users_text += f"   üéµ **Genius:** {genius_display_name or genius_username}\n"
            users_text += f"   üè∑Ô∏è **Roles:** {roles_text}\n"
            users_text += f"   üìÖ **Verificado:** {date_text}\n\n"
        
        embed.add_field(
            name=f"üë• Usuarios ({start_idx + 1}-{end_idx} de {len(verified_users)})",
            value=users_text or "No hay usuarios para mostrar",
            inline=False
        )
        
        # Agregar informaci√≥n de p√°ginas si hay m√°s de una p√°gina
        if total_pages > 1:
            embed.set_footer(text=f"P√°gina {current_page + 1} de {total_pages} ‚Ä¢ Usa !!verified_list [p√°gina] para ver m√°s")
        
        # Agregar estad√≠sticas adicionales
        active_users = sum(1 for user_data in verified_users if ctx.guild.get_member(user_data[0]))
        inactive_users = len(verified_users) - active_users
        
        embed.add_field(
            name="üìä Estad√≠sticas",
            value=f"üü¢ **Activos:** {active_users}\nüî¥ **Inactivos:** {inactive_users}",
            inline=True
        )
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Error en verified_list: {e}")
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"Error ejecutando comando: {str(e)}",
            color=0xf04747
        )
        await ctx.send(embed=embed)

@bot.command(name='test_roles')
async def test_roles(ctx, user: discord.Member = None):
    """Prueba la asignaci√≥n de roles manualmente (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_TEST_ROLES', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    target_user = user or ctx.author

    # Simular roles de Genius para prueba - puedes cambiar estos roles
    test_roles = ["Contributor", "Editor", "Staff", "Verified Artist"]

    discord_roles_to_add = []
    role_mapping = {
        "Contributor": config.get('ROLE_CONTRIBUTOR', ''),
        "Editor": config.get('ROLE_EDITOR', ''),
        "Moderator": config.get('ROLE_MODERATOR', ''),
        "Staff": config.get('ROLE_STAFF', ''),
        "Verified Artist": config.get('ROLE_VERIFIED_ARTIST', ''),
        "Transcriber": config.get('ROLE_TRANSCRIBER', ''),
        "Mediator": config.get('ROLE_MEDIATOR', '')
    }

    embed = discord.Embed(title="üß™ Prueba de Asignaci√≥n de Roles", color=0x5865f2)

    for genius_role in test_roles:
        role_id = role_mapping.get(genius_role, '')
        if role_id and role_id.isdigit():
            role = ctx.guild.get_role(int(role_id))
            if role:
                discord_roles_to_add.append(role)
                # Mostrar menci√≥n del rol en vez de ID
                embed.add_field(name=f"‚úÖ {genius_role}", value=f"‚Üí {role.mention}", inline=False)
            else:
                embed.add_field(name=f"‚ùå {genius_role}", value=f"Rol no encontrado (ID: {role_id})", inline=False)
        else:
            embed.add_field(name=f"‚ö†Ô∏è {genius_role}", value="No mapeado", inline=False)

    if discord_roles_to_add:
        try:
            await target_user.add_roles(*discord_roles_to_add, reason="Prueba manual de roles")
            embed.add_field(name="Resultado", value=f"‚úÖ Roles asignados a {target_user.mention}", inline=False)
        except Exception as e:
            embed.add_field(name="Error", value=f"‚ùå {str(e)}", inline=False)
    else:
        embed.add_field(name="Resultado", value="‚ùå No se encontraron roles para asignar", inline=False)

    await ctx.send(embed=embed)

@bot.command(name='list_roles')
async def list_roles(ctx):
    """Lista todos los roles del servidor con sus IDs (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_LIST_ROLES', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    embed = discord.Embed(title="üìã Roles del Servidor", color=0x5865f2)

    roles_info = []
    for role in ctx.guild.roles:
        if role.name != "@everyone":
            roles_info.append(f"**{role.name}** - ID: `{role.id}` (pos: {role.position})")

    # Dividir en chunks si hay muchos roles
    chunk_size = 10
    for i in range(0, len(roles_info), chunk_size):
        chunk = roles_info[i:i+chunk_size]
        embed.add_field(
            name=f"Roles {i+1}-{min(i+chunk_size, len(roles_info))}",
            value="\n".join(chunk),
            inline=False
        )

    await ctx.send(embed=embed)

@bot.command(name='show_config')
async def show_config(ctx):
    """Muestra la configuraci√≥n actual del bot (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_SHOW_CONFIG', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    logger.info(f"‚öôÔ∏è [COMANDO] show_config ejecutado por {ctx.author}")
    
    try:
        # Obtener configuraci√≥n din√°mica
        verification_channel_id = config.get('VERIFICATION_CHANNEL_ID', '')
        verified_role_id = config.get('VERIFIED_ROLE_ID', '')
        
        embed = discord.Embed(
            title="‚öôÔ∏è Configuraci√≥n Actual del Bot",
            description="Configuraci√≥n de roles y canales",
            color=0x5865f2
        )
        
        # Mostrar canal de verificaci√≥n
        if verification_channel_id:
            channel = ctx.guild.get_channel(int(verification_channel_id)) if verification_channel_id.isdigit() else None
            channel_name = channel.name if channel else "Canal no encontrado"
            embed.add_field(
                name="üì¢ Canal de Verificaci√≥n",
                value=f"{channel_name} (`{verification_channel_id}`)",
                inline=False
            )
        else:
            embed.add_field(
                name="üì¢ Canal de Verificaci√≥n",
                value="‚ùå No configurado",
                inline=False
            )
        
        # Mostrar rol verificado general
        if verified_role_id:
            role = ctx.guild.get_role(int(verified_role_id)) if verified_role_id.isdigit() else None
            role_name = role.name if role else "Rol no encontrado"
            embed.add_field(
                name="‚úÖ Rol Verificado General",
                value=f"{role_name} (`{verified_role_id}`)",
                inline=False
            )
        else:
            embed.add_field(
                name="‚úÖ Rol Verificado General",
                value="‚ùå No configurado",
                inline=False
            )
        
        # Mostrar roles de Genius
        roles_info = []
        genius_roles = ['ROLE_CONTRIBUTOR', 'ROLE_EDITOR', 'ROLE_MODERATOR', 'ROLE_STAFF', 'ROLE_VERIFIED_ARTIST', 'ROLE_TRANSCRIBER', 'ROLE_MEDIATOR']
        for genius_role_key in genius_roles:
            role_id = config.get(genius_role_key, '')
            genius_role_name = genius_role_key.replace('ROLE_', '').replace('_', ' ').title()
            if role_id and role_id.isdigit():
                role = ctx.guild.get_role(int(role_id))
                role_name = role.name if role else "Rol no encontrado"
                status = "‚úÖ" if role else "‚ö†Ô∏è"
                roles_info.append(f"{status} **{genius_role_name}**: {role_name} (`{role_id}`)")
            else:
                roles_info.append(f"‚ùå **{genius_role_name}**: No configurado")
        
        if roles_info:
            embed.add_field(
                name="üé≠ Roles de Genius",
                value="\n".join(roles_info),
                inline=False
            )
        
        embed.add_field(
            name="üîß Panel de Control",
            value="Configura estos valores desde el panel web en `/panel`",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Error en show_config: {e}")
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"Error obteniendo configuraci√≥n: {e}",
            color=0xff0000
        )
        await ctx.send(embed=embed)

@bot.command(name='cleanup_verifications')
async def cleanup_verifications(ctx):
    """Limpia verificaciones de usuarios que ya no est√°n en el servidor (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_CLEANUP_VERIFICATIONS', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    logger.info(f"üßπ [COMANDO] cleanup_verifications ejecutado por {ctx.author}")
    
    try:
        # Obtener todos los usuarios verificados
        import aiosqlite
        async with aiosqlite.connect(db.db_path) as database:
            cursor = await database.execute("""
                SELECT discord_id, genius_username, genius_display_name 
                FROM verifications
            """)
            verified_users = await cursor.fetchall()
        
        if not verified_users:
            embed = discord.Embed(
                title="üßπ Limpieza de Verificaciones",
                description="No hay verificaciones para limpiar",
                color=0xffa500
            )
            await ctx.send(embed=embed)
            return
        
        # Verificar qu√© usuarios ya no est√°n en el servidor
        users_to_remove = []
        for discord_id, genius_username, genius_display_name in verified_users:
            member = ctx.guild.get_member(discord_id)
            if not member:
                users_to_remove.append((discord_id, genius_username, genius_display_name))
        
        if not users_to_remove:
            embed = discord.Embed(
                title="üßπ Limpieza de Verificaciones",
                description="‚úÖ Todas las verificaciones est√°n actualizadas\nNo se encontraron usuarios inactivos para limpiar",
                color=0x43b581
            )
            await ctx.send(embed=embed)
            return
        
        # Mostrar usuarios que ser√°n eliminados y pedir confirmaci√≥n
        users_text = ""
        for i, (discord_id, genius_username, genius_display_name) in enumerate(users_to_remove[:10], 1):
            users_text += f"{i}. **{genius_display_name or genius_username}** (ID: {discord_id})\n"
        
        if len(users_to_remove) > 10:
            users_text += f"... y {len(users_to_remove) - 10} m√°s"
        
        embed = discord.Embed(
            title="üßπ Limpieza de Verificaciones",
            description=f"Se encontraron **{len(users_to_remove)}** verificaciones de usuarios que ya no est√°n en el servidor:",
            color=0xffa500
        )
        embed.add_field(
            name="üë• Usuarios a eliminar:",
            value=users_text,
            inline=False
        )
        embed.add_field(
            name="‚ö†Ô∏è Confirmaci√≥n requerida",
            value="Reacciona con ‚úÖ para confirmar la limpieza o ‚ùå para cancelar",
            inline=False
        )
        
        message = await ctx.send(embed=embed)
        await message.add_reaction("‚úÖ")
        await message.add_reaction("‚ùå")
        
        def check(reaction, user):
            return (user == ctx.author and 
                   str(reaction.emoji) in ["‚úÖ", "‚ùå"] and 
                   reaction.message.id == message.id)
        
        try:
            reaction, user = await bot.wait_for('reaction_add', timeout=30.0, check=check)
            
            if str(reaction.emoji) == "‚úÖ":
                # Proceder con la limpieza
                removed_count = 0
                async with aiosqlite.connect(db.db_path) as database:
                    for discord_id, _, _ in users_to_remove:
                        await database.execute(
                            "DELETE FROM verifications WHERE discord_id = ?",
                            (discord_id,)
                        )
                        removed_count += 1
                    await database.commit()
                
                embed = discord.Embed(
                    title="üßπ Limpieza Completada",
                    description=f"‚úÖ Se eliminaron **{removed_count}** verificaciones obsoletas",
                    color=0x43b581
                )
                embed.add_field(
                    name="üìä Resultado",
                    value=f"‚Ä¢ Verificaciones eliminadas: {removed_count}\n‚Ä¢ Verificaciones restantes: {len(verified_users) - removed_count}",
                    inline=False
                )
                await message.edit(embed=embed)
                
            else:
                embed = discord.Embed(
                    title="üßπ Limpieza Cancelada",
                    description="‚ùå La limpieza de verificaciones fue cancelada",
                    color=0xf04747
                )
                await message.edit(embed=embed)
                
        except asyncio.TimeoutError:
            embed = discord.Embed(
                title="üßπ Limpieza Expirada",
                description="‚è∞ La confirmaci√≥n expir√≥. La limpieza fue cancelada",
                color=0xffa500
            )
            await message.edit(embed=embed)
        
        # Limpiar reacciones
        try:
            await message.clear_reactions()
        except:
            pass
            
    except Exception as e:
        logger.error(f"Error en cleanup_verifications: {e}")
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"Error ejecutando limpieza: {str(e)}",
            color=0xf04747
        )
        await ctx.send(embed=embed)

@bot.command(name='sync', aliases=['sincronizar'])
async def sync_commands(ctx):
    """Sincroniza los comandos slash con Discord (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_SYNC', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    try:
        logger.info(f"üîÑ Sincronizando comandos (solicitado por {ctx.author})")
        
        # Enviar mensaje de inicio
        message = await ctx.send("üîÑ **Sincronizando comandos...**")
        
        # Sincronizar comandos
        synced = await bot.tree.sync()
        
        # Actualizar mensaje
        if synced:
            command_list = ", ".join([f"`/{cmd.name}`" for cmd in synced])
            await message.edit(content=f"‚úÖ **{len(synced)} comandos sincronizados correctamente**\n\nComandos disponibles:\n{command_list}")
        else:
            await message.edit(content="‚úÖ **Comandos sincronizados correctamente**\nNo se encontraron cambios en los comandos.")
        
        logger.info(f"‚úÖ Comandos sincronizados correctamente: {len(synced)} comandos")
        if synced:
            command_names = [cmd.name for cmd in synced]
            logger.info(f"üìã Comandos slash disponibles: {', '.join(command_names)}")
    except Exception as e:
        logger.error(f"‚ùå Error sincronizando comandos: {e}")
        await ctx.send(f"‚ùå **Error sincronizando comandos:** {str(e)}")

@bot.command(name='bot_stats')
async def bot_stats(ctx):
    """Muestra estad√≠sticas completas del bot (solo administradores y staff)"""
    from src.utils.dynamic_config import config
    if not config.get('ENABLE_COMMAND_BOT_STATS', 'true').lower() == 'true':
        return
    
    # Verificar permisos de staff
    if not has_staff_permissions(ctx.author):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await ctx.send(embed=embed)
        return
    logger.info(f"üìä [COMANDO] bot_stats ejecutado por {ctx.author}")
    
    try:
        # Obtener estad√≠sticas de la base de datos
        stats = await db.get_stats()
        
        # Obtener informaci√≥n del bot
        guild_count = len(bot.guilds)
        total_members = sum(guild.member_count for guild in bot.guilds)
        
        # Obtener uptime
        import time
        from datetime import datetime, timedelta
        
        # Calcular uptime (aproximado desde que se inici√≥ el proceso)
        uptime_seconds = int(time.time() - server_start_time) if 'server_start_time' in globals() else 0
        uptime_delta = timedelta(seconds=uptime_seconds)
        
        # Obtener informaci√≥n de memoria
        try:
            import psutil
            process = psutil.Process()
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            cpu_percent = process.cpu_percent()
        except ImportError:
            memory_mb = "N/A"
            cpu_percent = "N/A"
        
        embed = discord.Embed(
            title="üìä Estad√≠sticas del Bot",
            description=f"Estad√≠sticas completas de **{bot.user.name}**",
            color=0x5865f2
        )
        
        # Informaci√≥n b√°sica del bot
        embed.add_field(
            name="ü§ñ Informaci√≥n del Bot",
            value=f"‚Ä¢ **Nombre:** {bot.user.name}\n"
                  f"‚Ä¢ **ID:** {bot.user.id}\n"
                  f"‚Ä¢ **Instancia:** `{BOT_INSTANCE_ID}`\n"
                  f"‚Ä¢ **Latencia:** {round(bot.latency * 1000)}ms",
            inline=True
        )
        
        # Estad√≠sticas de servidores
        embed.add_field(
            name="üè∞ Servidores",
            value=f"‚Ä¢ **Servidores:** {guild_count}\n"
                  f"‚Ä¢ **Miembros totales:** {total_members}\n"
                  f"‚Ä¢ **Miembros √∫nicos:** {len(bot.users)}",
            inline=True
        )
        
        # Estad√≠sticas de verificaci√≥n
        embed.add_field(
            name="‚úÖ Verificaciones",
            value=f"‚Ä¢ **Usuarios verificados:** {stats.get('verified_users', 0)}\n"
                  f"‚Ä¢ **Verificaciones pendientes:** {stats.get('pending_verifications', 0)}",
            inline=True
        )
        
        # Informaci√≥n del sistema
        embed.add_field(
            name="üíª Sistema",
            value=f"‚Ä¢ **Uptime:** {str(uptime_delta).split('.')[0]}\n"
                  f"‚Ä¢ **Memoria:** {memory_mb:.1f} MB\n"
                  f"‚Ä¢ **CPU:** {cpu_percent}%" if cpu_percent != "N/A" else f"‚Ä¢ **CPU:** N/A",
            inline=True
        )
        
        # Informaci√≥n de keep-alive
        if KEEP_ALIVE_ENABLED:
            try:
                ka_stats = get_keep_alive_stats()
                success_rate = ka_stats.get('success_rate', 0)
                embed.add_field(
                    name="üîÑ Keep-Alive",
                    value=f"‚Ä¢ **Estado:** Activo\n"
                          f"‚Ä¢ **Pings enviados:** {ka_stats.get('pings_sent', 0)}\n"
                          f"‚Ä¢ **Tasa de √©xito:** {success_rate:.1f}%",
                    inline=True
                )
            except:
                embed.add_field(
                    name="üîÑ Keep-Alive",
                    value="‚Ä¢ **Estado:** Activo\n‚Ä¢ **Estad√≠sticas:** No disponibles",
                    inline=True
                )
        else:
            embed.add_field(
                name="üîÑ Keep-Alive",
                value="‚Ä¢ **Estado:** Deshabilitado",
                inline=True
            )
        
        # Informaci√≥n de configuraci√≥n
        embed.add_field(
            name="‚öôÔ∏è Configuraci√≥n",
            value=f"‚Ä¢ **Base URL:** {BASE_URL}\n"
                  f"‚Ä¢ **Puerto:** {WEB_SERVER_PORT}\n"
                  f"‚Ä¢ **Roles configurados:** {len([r for r in GENIUS_ROLE_IDS.values() if r != 0])}",
            inline=False
        )
        
        embed.set_footer(text=f"Bot iniciado: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else None)
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Error en bot_stats: {e}")
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"Error obteniendo estad√≠sticas: {str(e)}",
            color=0xf04747
        )
        await ctx.send(embed=embed)

# ==================== VIEWS ADICIONALES ====================
# Vistas para slash commands que requieren confirmaci√≥n

class CleanupConfirmationView(discord.ui.View):
    def __init__(self, users_to_remove, database):
        super().__init__(timeout=30.0)
        self.users_to_remove = users_to_remove
        self.database = database
    
    @discord.ui.button(label='‚úÖ Confirmar Limpieza', style=discord.ButtonStyle.danger)
    async def confirm_cleanup(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            # Proceder con la limpieza
            removed_count = 0
            import aiosqlite
            async with aiosqlite.connect(self.database.db_path) as database:
                for discord_id, _, _ in self.users_to_remove:
                    await database.execute(
                        "DELETE FROM verifications WHERE discord_id = ?",
                        (discord_id,)
                    )
                    removed_count += 1
                await database.commit()
            
            embed = discord.Embed(
                title="üßπ Limpieza Completada",
                description=f"‚úÖ Se eliminaron **{removed_count}** verificaciones obsoletas",
                color=0x43b581
            )
            embed.add_field(
                name="üìä Resultado",
                value=f"‚Ä¢ Verificaciones eliminadas: {removed_count}\n‚Ä¢ Operaci√≥n completada exitosamente",
                inline=False
            )
            
            # Deshabilitar botones
            for item in self.children:
                item.disabled = True
            
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            logger.error(f"Error en confirmaci√≥n de limpieza: {e}")
            embed = discord.Embed(
                title="‚ùå Error en Limpieza",
                description=f"Error ejecutando limpieza: {str(e)}",
                color=0xf04747
            )
            await interaction.response.edit_message(embed=embed, view=None)
    
    @discord.ui.button(label='‚ùå Cancelar', style=discord.ButtonStyle.secondary)
    async def cancel_cleanup(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üßπ Limpieza Cancelada",
            description="‚ùå La limpieza de verificaciones fue cancelada",
            color=0xf04747
        )
        
        # Deshabilitar botones
        for item in self.children:
            item.disabled = True
        
        await interaction.response.edit_message(embed=embed, view=self)
    
    async def on_timeout(self):
        # Deshabilitar botones cuando expire el timeout
        for item in self.children:
            item.disabled = True

# ==================== SLASH COMMANDS ====================
# Implementaci√≥n de slash commands para todos los comandos existentes

@bot.tree.command(name="ping", description="Comando simple para verificar si el bot responde (Solo staff)")
async def slash_ping(interaction: discord.Interaction):
    """Slash command version of ping"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    logger.info(f"üèì [SLASH] Ping ejecutado por {interaction.user} - ID: {interaction.id} - Instancia: {BOT_INSTANCE_ID}")
    await interaction.response.send_message(f'Pong! üèì (Instancia: `{BOT_INSTANCE_ID}`)')

@bot.tree.command(name="help", description="Muestra el men√∫ de ayuda interactivo del bot (Solo staff)")
async def slash_help(interaction: discord.Interaction):
    """Slash command version of help"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    logger.info(f"‚ùì [SLASH] Help ejecutado por {interaction.user}")
    
    # Verificar si el usuario es administrador o staff
    is_admin = has_staff_permissions(interaction.user)
    
    # Crear vista con paginaci√≥n
    view = HelpView(is_admin=is_admin)
    view.update_buttons()
    
    # Enviar el primer embed con la vista
    await interaction.response.send_message(embed=view.pages[0], view=view)

@bot.tree.command(name="verify_status", description="Verifica el estado de verificaci√≥n de un usuario")
@app_commands.describe(user="Usuario del cual verificar el estado (opcional, por defecto t√∫ mismo)")
async def slash_verify_status(interaction: discord.Interaction, user: discord.Member = None):
    """Slash command version of verify_status"""
    # Si el usuario especifica a otro usuario, verificar permisos
    if user and user != interaction.user:
        if not has_staff_permissions(interaction.user):
            embed = discord.Embed(
                title="‚ùå Sin Permisos",
                description="Solo puedes verificar tu propio estado de verificaci√≥n. Los administradores y staff pueden verificar el estado de otros usuarios.",
                color=0xf04747
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
    
    target_user = user or interaction.user
    
    verification = await db.get_verification(target_user.id)
    
    if verification:
        embed = discord.Embed(
            title="‚úÖ Usuario Verificado",
            color=0x43b581
        )
        embed.add_field(name="Discord", value=f"{target_user.mention}", inline=True)
        embed.add_field(name="Genius Username", value=verification['genius_username'], inline=True)
        embed.add_field(name="Genius Display Name", value=verification['genius_display_name'], inline=True)
        embed.add_field(name="Roles en Genius", value=verification['genius_roles'] or "Contributor", inline=False)
        embed.add_field(name="Verificado el", value=verification['verified_at'], inline=True)
    else:
        embed = discord.Embed(
            title="‚ùå Usuario No Verificado",
            description=f"{target_user.mention} no ha verificado su cuenta de Genius.com",
            color=0xf04747
        )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="setup_verification", description="Configura el mensaje de verificaci√≥n con bot√≥n (Solo administradores y staff)")
async def slash_setup_verification(interaction: discord.Interaction):
    """Slash command version of setup_verification"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    try:
        logger.info(f"üîß [SLASH] setup_verification ejecutado por {interaction.user} en {interaction.guild.name} - Instancia: {BOT_INSTANCE_ID}")
        logger.info(f"üîß [DEBUG] BASE_URL actual: {BASE_URL}")

        embed = discord.Embed(
            title="üîê Verificaci√≥n con Genius",
            description="Verifica tu cuenta de Genius para acceder a las funciones del servidor.",
            color=0x5865f2
        )
        embed.add_field(
            name="¬øPor qu√© verificar?",
            value="‚Ä¢ Acceso a canales\n‚Ä¢ Roles basados en cuenta de Genius\n‚Ä¢ Nickname autom√°tico de Genius",
            inline=False
        )
        embed.set_footer(text="Haz clic en el bot√≥n de abajo para comenzar")

        view = VerificationView()
        logger.info(f"üì§ [SLASH] Enviando embed de verificaci√≥n...")
        await interaction.response.send_message(embed=embed, view=view)
        logger.info(f"‚úÖ [SLASH] Setup de verificaci√≥n completado exitosamente")

    except Exception as e:
        logger.error(f"‚ùå [SLASH] Error en setup_verification: {e}")
        await interaction.response.send_message(f"‚ùå Error configurando verificaci√≥n: {str(e)}", ephemeral=True)

@bot.tree.command(name="unverify", description="Desverifica a un usuario y elimina sus roles de Genius (Solo administradores y staff)")
@app_commands.describe(user="Usuario a desverificar")
async def slash_unverify(interaction: discord.Interaction, user: discord.Member):
    """Slash command version of unverify"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    if await db.is_verified(user.id):
        # Eliminar de la base de datos
        await db.remove_verification(user.id)

        # Eliminar roles de Genius del usuario
        await remove_genius_roles(user, interaction.guild)

        embed = discord.Embed(
            title="‚úÖ Usuario Desverificado",
            description=f"{user.mention} ha sido desverificado exitosamente",
            color=0x43b581
        )
        embed.add_field(
            name="Acciones realizadas:",
            value="‚Ä¢ Eliminado de la base de datos\n‚Ä¢ Roles de Genius removidos\n‚Ä¢ Nickname restaurado",
            inline=False
        )
        await interaction.response.send_message(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"{user.mention} no estaba verificado",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="verified_list", description="Lista todos los usuarios verificados del servidor (Solo administradores y staff)")
async def slash_verified_list(interaction: discord.Interaction):
    """Slash command version of verified_list"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    logger.info(f"üìã [SLASH] verified_list ejecutado por {interaction.user}")
    
    try:
        # Obtener estad√≠sticas de la base de datos
        stats = await db.get_stats()
        verified_count = stats.get("verified_users", 0)
        
        if verified_count == 0:
            embed = discord.Embed(
                title="üìã Lista de Usuarios Verificados",
                description="No hay usuarios verificados en este servidor",
                color=0xffa500
            )
            await interaction.response.send_message(embed=embed)
            return
        
        # Obtener todos los usuarios verificados
        try:
            import aiosqlite
            async with aiosqlite.connect(db.db_path) as database:
                cursor = await database.execute("""
                    SELECT discord_id, genius_username, genius_display_name, 
                           genius_roles, verified_at 
                    FROM verifications 
                    ORDER BY verified_at DESC
                """)
                verified_users = await cursor.fetchall()
        except Exception as e:
            logger.error(f"Error obteniendo usuarios verificados: {e}")
            embed = discord.Embed(
                title="‚ùå Error",
                description="Error al obtener la lista de usuarios verificados",
                color=0xf04747
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Crear embed con la lista
        embed = discord.Embed(
            title="üìã Lista de Usuarios Verificados",
            description=f"Total de usuarios verificados: **{verified_count}**",
            color=0x43b581
        )
        
        # Procesar usuarios en grupos de 10 para evitar l√≠mites de embed
        users_per_page = 10
        current_page = 0
        total_pages = (len(verified_users) + users_per_page - 1) // users_per_page
        
        start_idx = current_page * users_per_page
        end_idx = min(start_idx + users_per_page, len(verified_users))
        
        users_text = ""
        for i, user_data in enumerate(verified_users[start_idx:end_idx], start_idx + 1):
            discord_id, genius_username, genius_display_name, genius_roles, verified_at = user_data
            
            # Intentar obtener el usuario de Discord
            discord_user = interaction.guild.get_member(discord_id)
            if discord_user:
                discord_name = f"{discord_user.mention}"
                status_emoji = "üü¢"
            else:
                discord_name = f"Usuario no encontrado (ID: {discord_id})"
                status_emoji = "üî¥"
            
            # Formatear roles
            roles_list = genius_roles.split(',') if genius_roles else ['Contributor']
            roles_text = ', '.join(roles_list)
            
            # Formatear fecha
            try:
                from datetime import datetime
                verified_date = datetime.fromisoformat(verified_at.replace('Z', '+00:00'))
                date_text = verified_date.strftime("%d/%m/%Y")
            except:
                date_text = "Fecha desconocida"
            
            users_text += f"{status_emoji} **{i}.** {discord_name}\n"
            users_text += f"   üéµ **Genius:** {genius_display_name or genius_username}\n"
            users_text += f"   üè∑Ô∏è **Roles:** {roles_text}\n"
            users_text += f"   üìÖ **Verificado:** {date_text}\n\n"
        
        embed.add_field(
            name=f"üë• Usuarios ({start_idx + 1}-{end_idx} de {len(verified_users)})",
            value=users_text or "No hay usuarios para mostrar",
            inline=False
        )
        
        # Agregar informaci√≥n de p√°ginas si hay m√°s de una p√°gina
        if total_pages > 1:
            embed.set_footer(text=f"P√°gina {current_page + 1} de {total_pages} ‚Ä¢ Usa /verified_list para ver m√°s")
        
        # Agregar estad√≠sticas adicionales
        active_users = sum(1 for user_data in verified_users if interaction.guild.get_member(user_data[0]))
        inactive_users = len(verified_users) - active_users
        
        embed.add_field(
            name="üìä Estad√≠sticas",
            value=f"üü¢ **Activos:** {active_users}\nüî¥ **Inactivos:** {inactive_users}",
            inline=True
        )
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        logger.error(f"Error en verified_list: {e}")
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"Error ejecutando comando: {str(e)}",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="test_roles", description="Prueba la asignaci√≥n de roles manualmente (Solo administradores y staff)")
@app_commands.describe(user="Usuario para probar roles (opcional, por defecto t√∫ mismo)")
async def slash_test_roles(interaction: discord.Interaction, user: discord.Member = None):
    """Slash command version of test_roles"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    target_user = user or interaction.user

    # Simular roles de Genius para prueba - puedes cambiar estos roles
    test_roles = ["Contributor", "Editor", "Staff", "Verified Artist"]

    from src.utils.dynamic_config import config
    
    discord_roles_to_add = []
    role_mapping = {
        "Contributor": config.get('ROLE_CONTRIBUTOR', ''),
        "Editor": config.get('ROLE_EDITOR', ''),
        "Moderator": config.get('ROLE_MODERATOR', ''),
        "Staff": config.get('ROLE_STAFF', ''),
        "Verified Artist": config.get('ROLE_VERIFIED_ARTIST', ''),
        "Transcriber": config.get('ROLE_TRANSCRIBER', ''),
        "Mediator": config.get('ROLE_MEDIATOR', '')
    }

    embed = discord.Embed(title="üß™ Prueba de Asignaci√≥n de Roles", color=0x5865f2)

    for genius_role in test_roles:
        role_id = role_mapping.get(genius_role, '')
        if role_id and role_id.isdigit():
            role = interaction.guild.get_role(int(role_id))
            if role:
                discord_roles_to_add.append(role)
                # Mostrar menci√≥n del rol en vez de ID
                embed.add_field(name=f"‚úÖ {genius_role}", value=f"‚Üí {role.mention}", inline=False)
            else:
                embed.add_field(name=f"‚ùå {genius_role}", value=f"Rol no encontrado (ID: {role_id})", inline=False)
        else:
            embed.add_field(name=f"‚ö†Ô∏è {genius_role}", value="No mapeado", inline=False)

    if discord_roles_to_add:
        try:
            await target_user.add_roles(*discord_roles_to_add, reason="Prueba manual de roles")
            embed.add_field(name="Resultado", value=f"‚úÖ Roles asignados a {target_user.mention}", inline=False)
        except Exception as e:
            embed.add_field(name="Error", value=f"‚ùå {str(e)}", inline=False)
    else:
        embed.add_field(name="Resultado", value="‚ùå No se encontraron roles para asignar", inline=False)

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="list_roles", description="Lista todos los roles del servidor con sus IDs (Solo administradores y staff)")
async def slash_list_roles(interaction: discord.Interaction):
    """Slash command version of list_roles"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    embed = discord.Embed(title="üìã Roles del Servidor", color=0x5865f2)

    roles_info = []
    for role in interaction.guild.roles:
        if role.name != "@everyone":
            roles_info.append(f"**{role.name}** - ID: `{role.id}` (pos: {role.position})")

    # Dividir en chunks si hay muchos roles
    chunk_size = 10
    for i in range(0, len(roles_info), chunk_size):
        chunk = roles_info[i:i+chunk_size]
        embed.add_field(
            name=f"Roles {i+1}-{min(i+chunk_size, len(roles_info))}",
            value="\n".join(chunk),
            inline=False
        )

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="show_config", description="Muestra la configuraci√≥n actual del bot (Solo administradores y staff)")
async def slash_show_config(interaction: discord.Interaction):
    """Slash command version of show_config"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    logger.info(f"‚öôÔ∏è [SLASH] show_config ejecutado por {interaction.user}")
    
    try:
        # Obtener configuraci√≥n din√°mica
        from src.utils.dynamic_config import config
        verification_channel_id = config.get('VERIFICATION_CHANNEL_ID', '')
        verified_role_id = config.get('VERIFIED_ROLE_ID', '')
        
        embed = discord.Embed(
            title="‚öôÔ∏è Configuraci√≥n Actual del Bot",
            description="Configuraci√≥n de roles y canales",
            color=0x5865f2
        )
        
        # Mostrar canal de verificaci√≥n
        if verification_channel_id:
            channel = interaction.guild.get_channel(int(verification_channel_id)) if verification_channel_id.isdigit() else None
            channel_name = channel.name if channel else "Canal no encontrado"
            embed.add_field(
                name="üì¢ Canal de Verificaci√≥n",
                value=f"{channel_name} (`{verification_channel_id}`)",
                inline=False
            )
        else:
            embed.add_field(
                name="üì¢ Canal de Verificaci√≥n",
                value="‚ùå No configurado",
                inline=False
            )
        
        # Mostrar rol verificado general
        if verified_role_id:
            role = interaction.guild.get_role(int(verified_role_id)) if verified_role_id.isdigit() else None
            role_name = role.name if role else "Rol no encontrado"
            embed.add_field(
                name="‚úÖ Rol Verificado General",
                value=f"{role_name} (`{verified_role_id}`)",
                inline=False
            )
        else:
            embed.add_field(
                name="‚úÖ Rol Verificado General",
                value="‚ùå No configurado",
                inline=False
            )
        
        # Mostrar roles de Genius
        roles_info = []
        genius_roles = ['ROLE_CONTRIBUTOR', 'ROLE_EDITOR', 'ROLE_MODERATOR', 'ROLE_STAFF', 'ROLE_VERIFIED_ARTIST', 'ROLE_TRANSCRIBER', 'ROLE_MEDIATOR']
        for genius_role_key in genius_roles:
            role_id = config.get(genius_role_key, '')
            genius_role_name = genius_role_key.replace('ROLE_', '').replace('_', ' ').title()
            if role_id and role_id.isdigit():
                role = interaction.guild.get_role(int(role_id))
                role_name = role.name if role else "Rol no encontrado"
                status = "‚úÖ" if role else "‚ö†Ô∏è"
                roles_info.append(f"{status} **{genius_role_name}**: {role_name} (`{role_id}`)")
            else:
                roles_info.append(f"‚ùå **{genius_role_name}**: No configurado")
        
        if roles_info:
            embed.add_field(
                name="üé≠ Roles de Genius",
                value="\n".join(roles_info),
                inline=False
            )
        
        embed.add_field(
            name="üîß Panel de Control",
            value="Configura estos valores desde el panel web en `/panel`",
            inline=False
        )
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        logger.error(f"Error en slash_show_config: {e}")
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"Error obteniendo configuraci√≥n: {e}",
            color=0xff0000
        )
        await interaction.response.send_message(embed=embed)

@bot.tree.command(name="cleanup_verifications", description="Limpia verificaciones de usuarios que ya no est√°n en el servidor (Solo administradores y staff)")
async def slash_cleanup_verifications(interaction: discord.Interaction):
    """Slash command version of cleanup_verifications"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    logger.info(f"üßπ [SLASH] cleanup_verifications ejecutado por {interaction.user}")
    
    try:
        # Obtener todos los usuarios verificados
        import aiosqlite
        async with aiosqlite.connect(db.db_path) as database:
            cursor = await database.execute("""
                SELECT discord_id, genius_username, genius_display_name 
                FROM verifications
            """)
            verified_users = await cursor.fetchall()
        
        if not verified_users:
            embed = discord.Embed(
                title="üßπ Limpieza de Verificaciones",
                description="No hay verificaciones para limpiar",
                color=0xffa500
            )
            await interaction.response.send_message(embed=embed)
            return
        
        # Verificar qu√© usuarios ya no est√°n en el servidor
        users_to_remove = []
        for discord_id, genius_username, genius_display_name in verified_users:
            member = interaction.guild.get_member(discord_id)
            if not member:
                users_to_remove.append((discord_id, genius_username, genius_display_name))
        
        if not users_to_remove:
            embed = discord.Embed(
                title="üßπ Limpieza de Verificaciones",
                description="‚úÖ Todas las verificaciones est√°n actualizadas\nNo se encontraron usuarios inactivos para limpiar",
                color=0x43b581
            )
            await interaction.response.send_message(embed=embed)
            return
        
        # Mostrar usuarios que ser√°n eliminados
        users_text = ""
        for i, (discord_id, genius_username, genius_display_name) in enumerate(users_to_remove[:10], 1):
            users_text += f"{i}. **{genius_display_name or genius_username}** (ID: {discord_id})\n"
        
        if len(users_to_remove) > 10:
            users_text += f"... y {len(users_to_remove) - 10} m√°s"
        
        embed = discord.Embed(
            title="üßπ Limpieza de Verificaciones",
            description=f"Se encontraron **{len(users_to_remove)}** verificaciones de usuarios que ya no est√°n en el servidor:",
            color=0xffa500
        )
        embed.add_field(
            name="üë• Usuarios a eliminar:",
            value=users_text,
            inline=False
        )
        embed.add_field(
            name="‚ö†Ô∏è Confirmaci√≥n requerida",
            value="Usa los botones de abajo para confirmar o cancelar la limpieza",
            inline=False
        )
        
        # Crear vista con botones de confirmaci√≥n
        view = CleanupConfirmationView(users_to_remove, db)
        await interaction.response.send_message(embed=embed, view=view)
            
    except Exception as e:
        logger.error(f"Error en cleanup_verifications: {e}")
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"Error ejecutando limpieza: {str(e)}",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="bot_stats", description="Muestra estad√≠sticas completas del bot (Solo administradores y staff)")
async def slash_bot_stats(interaction: discord.Interaction):
    """Slash command version of bot_stats"""
    # Verificar permisos de staff
    if not has_staff_permissions(interaction.user):
        embed = discord.Embed(
            title="‚ùå Sin Permisos",
            description="Este comando solo est√° disponible para administradores y staff.",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    logger.info(f"üìä [SLASH] bot_stats ejecutado por {interaction.user}")
    
    try:
        # Obtener estad√≠sticas de la base de datos
        stats = await db.get_stats()
        
        # Obtener informaci√≥n del bot
        guild_count = len(bot.guilds)
        total_members = sum(guild.member_count for guild in bot.guilds)
        
        # Obtener uptime
        import time
        from datetime import datetime, timedelta
        
        # Calcular uptime (aproximado desde que se inici√≥ el proceso)
        uptime_seconds = int(time.time() - server_start_time) if 'server_start_time' in globals() else 0
        uptime_delta = timedelta(seconds=uptime_seconds)
        
        # Obtener informaci√≥n de memoria
        try:
            import psutil
            process = psutil.Process()
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            cpu_percent = process.cpu_percent()
        except ImportError:
            memory_mb = "N/A"
            cpu_percent = "N/A"
        
        embed = discord.Embed(
            title="üìä Estad√≠sticas del Bot",
            description=f"Estad√≠sticas completas de **{bot.user.name}**",
            color=0x5865f2
        )
        
        # Informaci√≥n b√°sica del bot
        embed.add_field(
            name="ü§ñ Informaci√≥n del Bot",
            value=f"‚Ä¢ **Nombre:** {bot.user.name}\n"
                  f"‚Ä¢ **ID:** {bot.user.id}\n"
                  f"‚Ä¢ **Instancia:** `{BOT_INSTANCE_ID}`\n"
                  f"‚Ä¢ **Latencia:** {round(bot.latency * 1000)}ms",
            inline=True
        )
        
        # Estad√≠sticas de servidores
        embed.add_field(
            name="üè∞ Servidores",
            value=f"‚Ä¢ **Servidores:** {guild_count}\n"
                  f"‚Ä¢ **Miembros totales:** {total_members}\n"
                  f"‚Ä¢ **Miembros √∫nicos:** {len(bot.users)}",
            inline=True
        )
        
        # Estad√≠sticas de verificaci√≥n
        embed.add_field(
            name="‚úÖ Verificaciones",
            value=f"‚Ä¢ **Usuarios verificados:** {stats.get('verified_users', 0)}\n"
                  f"‚Ä¢ **Verificaciones pendientes:** {stats.get('pending_verifications', 0)}",
            inline=True
        )
        
        # Informaci√≥n del sistema
        embed.add_field(
            name="üíª Sistema",
            value=f"‚Ä¢ **Uptime:** {str(uptime_delta).split('.')[0]}\n"
                  f"‚Ä¢ **Memoria:** {memory_mb:.1f} MB\n"
                  f"‚Ä¢ **CPU:** {cpu_percent}%" if cpu_percent != "N/A" else f"‚Ä¢ **CPU:** N/A",
            inline=True
        )
        
        # Informaci√≥n de keep-alive
        if KEEP_ALIVE_ENABLED:
            try:
                ka_stats = get_keep_alive_stats()
                success_rate = ka_stats.get('success_rate', 0)
                embed.add_field(
                    name="üîÑ Keep-Alive",
                    value=f"‚Ä¢ **Estado:** Activo\n"
                          f"‚Ä¢ **Pings enviados:** {ka_stats.get('pings_sent', 0)}\n"
                          f"‚Ä¢ **Tasa de √©xito:** {success_rate:.1f}%",
                    inline=True
                )
            except:
                embed.add_field(
                    name="üîÑ Keep-Alive",
                    value="‚Ä¢ **Estado:** Activo\n‚Ä¢ **Estad√≠sticas:** No disponibles",
                    inline=True
                )
        else:
            embed.add_field(
                name="üîÑ Keep-Alive",
                value="‚Ä¢ **Estado:** Deshabilitado",
                inline=True
            )
        
        # Informaci√≥n de configuraci√≥n
        embed.add_field(
            name="‚öôÔ∏è Configuraci√≥n",
            value=f"‚Ä¢ **Base URL:** {BASE_URL}\n"
                  f"‚Ä¢ **Puerto:** {WEB_SERVER_PORT}\n"
                  f"‚Ä¢ **Roles configurados:** {len([r for r in GENIUS_ROLE_IDS.values() if r != 0])}",
            inline=False
        )
        
        embed.set_footer(text=f"Bot iniciado: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else None)
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        logger.error(f"Error en bot_stats: {e}")
        embed = discord.Embed(
            title="‚ùå Error",
            description=f"Error obteniendo estad√≠sticas: {str(e)}",
            color=0xf04747
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

async def shutdown_handler():
    """Maneja el cierre limpio del bot"""
    logger.info("üîÑ Iniciando cierre limpio...")
    
    try:
        # Detener keep-alive
        if KEEP_ALIVE_ENABLED:
            await stop_keep_alive()
            logger.info("üõë Keep-alive detenido")
        
        # Cerrar conexi√≥n del bot
        if not bot.is_closed():
            await bot.close()
            logger.info("üõë Bot desconectado")
            
    except Exception as e:
        logger.error(f"Error durante cierre: {e}")
    
    logger.info("‚úÖ Cierre completado")

async def check_for_duplicate_instances():
    """Verifica si hay instancias duplicadas del bot ejecut√°ndose"""
    await asyncio.sleep(10)  # Esperar a que el servidor web est√© listo
    
    try:
        logger.info(f"üîç Verificando duplicaci√≥n de instancias - Mi ID: {BOT_INSTANCE_ID}")
        
        import aiohttp
        async with aiohttp.ClientSession() as session:
            ping_url = f"{BASE_URL}/ping?format=json"
            instance_ids = set()
            
            # Hacer m√∫ltiples pings para detectar diferentes instancias
            for i in range(5):
                try:
                    async with session.get(ping_url) as response:
                        if response.status == 200:
                            data = await response.json()
                            if 'instance_id' in data:
                                instance_ids.add(data['instance_id'])
                    await asyncio.sleep(0.5)
                except Exception as e:
                    logger.debug(f"Error en ping {i+1}: {e}")
            
            if len(instance_ids) > 1:
                logger.warning(f"üö® M√öLTIPLES INSTANCIAS DETECTADAS: {instance_ids}")
                
                # Determinar cu√°l instancia debe continuar (la primera alfab√©ticamente)
                sorted_instances = sorted(instance_ids)
                logger.info(f"üìã Instancias ordenadas: {sorted_instances}")
                
                if BOT_INSTANCE_ID != sorted_instances[0]:
                    logger.warning(f"üõë CERRANDO INSTANCIA DUPLICADA: {BOT_INSTANCE_ID}")
                    logger.warning(f"‚úÖ INSTANCIA PRINCIPAL CONTIN√öA: {sorted_instances[0]}")
                    
                    # Cerrar esta instancia
                    await shutdown_handler()
                    os._exit(1)
                else:
                    logger.info(f"‚úÖ SOY LA INSTANCIA PRINCIPAL: {BOT_INSTANCE_ID}")
                    
                    # Iniciar verificaci√≥n peri√≥dica
                    asyncio.create_task(periodic_duplicate_check())
            else:
                logger.info(f"‚úÖ Instancia √∫nica detectada: {BOT_INSTANCE_ID}")
                
                # Iniciar verificaci√≥n peri√≥dica de todas formas
                asyncio.create_task(periodic_duplicate_check())
                
    except Exception as e:
        logger.error(f"Error verificando duplicaci√≥n: {e}")

async def periodic_duplicate_check():
    """Verificaci√≥n peri√≥dica de duplicaci√≥n cada 2 minutos"""
    while True:
        try:
            await asyncio.sleep(120)  # Esperar 2 minutos
            logger.info(f"üîç Verificaci√≥n peri√≥dica de duplicaci√≥n - Instancia: {BOT_INSTANCE_ID}")
            
            import aiohttp
            async with aiohttp.ClientSession() as session:
                ping_url = f"{BASE_URL}/ping?format=json"
                instance_ids = set()
                
                # Hacer 3 pings r√°pidos
                for i in range(3):
                    try:
                        async with session.get(ping_url) as response:
                            if response.status == 200:
                                data = await response.json()
                                if 'instance_id' in data:
                                    instance_ids.add(data['instance_id'])
                        await asyncio.sleep(1)
                    except:
                        pass
                
                if len(instance_ids) > 1:
                    logger.warning(f"üö® DUPLICACI√ìN DETECTADA EN VERIFICACI√ìN PERI√ìDICA: {instance_ids}")
                    sorted_instances = sorted(instance_ids)
                    
                    # Si no somos la primera, cerramos inmediatamente
                    if BOT_INSTANCE_ID != sorted_instances[0]:
                        logger.warning(f"üõë CERRANDO INSTANCIA DUPLICADA: {BOT_INSTANCE_ID}")
                        os._exit(1)
                else:
                    logger.debug(f"‚úÖ Verificaci√≥n peri√≥dica OK - Instancia √∫nica: {BOT_INSTANCE_ID}")
                    
        except Exception as e:
            logger.error(f"Error en verificaci√≥n peri√≥dica: {e}")
            await asyncio.sleep(60)  # Esperar 1 minuto antes de reintentar

async def run_bot():
    """Funci√≥n principal que inicia el bot y el servidor web"""
    try:
        # Inicializar base de datos
        await db.init_db()
        logger.info("‚úÖ Base de datos inicializada")
        
        # Iniciar servidor web en background (legacy Quart) solo si NO estamos en modo unificado
        import os as _os
        server_task = None
        if _os.environ.get("UNIFIED_MODE") != "true":
            from src.web.server import app
            import hypercorn.asyncio
            from hypercorn import Config
            
            config = Config()
            config.bind = [f"{WEB_SERVER_HOST}:{WEB_SERVER_PORT}"]
            config.use_reloader = False
            config.accesslog = "-"  # Log a stdout
            
            logger.info(f"üåê Iniciando servidor web (legacy) en {WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
            
            # Iniciar servidor web como tarea en background
            server_task = asyncio.create_task(
                hypercorn.asyncio.serve(app, config)
            )
        else:
            logger.info("üß© UNIFIED_MODE activo: se omite servidor web legacy (Quart)")
        
        # Iniciar keep-alive si est√° habilitado
        if KEEP_ALIVE_ENABLED:
            from src.services.keep_alive import start_keep_alive
            await start_keep_alive()
            logger.info("üîÑ Keep-alive iniciado")
        
        # Verificar duplicaci√≥n de instancias despu√©s de un tiempo
        asyncio.create_task(check_for_duplicate_instances())
        
        # Iniciar el bot de Discord
        logger.info(f"üöÄ Iniciando bot de Discord - Instancia: {BOT_INSTANCE_ID}")
        try:
            await bot.start(TOKEN)
        except Exception as e:
            logger.error(f"Error iniciando bot de Discord: {e}")
            logger.info("üåê Servidor web continuar√° ejecut√°ndose...")
            # Mantener el servidor web ejecut√°ndose
            await server_task
        
    except KeyboardInterrupt:
        logger.info("üîÑ Interrupci√≥n detectada, cerrando...")
        await shutdown_handler()
    except Exception as e:
        logger.error(f"Error fatal: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("üîÑ Interrupci√≥n detectada, cerrando...")
    except Exception as e:
        logger.error(f"Error fatal: {e}")